{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/store/notificationSlice.js"],"sourcesContent":["export const notificationSlice = (set) => ({\r\n    message: null,\r\n    errorMessage: null,\r\n    loading: false,\r\n    setIsloading: (loading) => set({ loading }),\r\n    setMessage: (message) => {\r\n        set({ message });\r\n        setTimeout(() => {\r\n            set({ message: null })\r\n        }, 2000);\r\n    },\r\n    setErrorMessage: (errorMessage) => {\r\n        set({ errorMessage });\r\n        setTimeout(() => {\r\n            set({ errorMessage: null })\r\n        }, 2000);\r\n    },\r\n})"],"names":[],"mappings":";;;AAAO,MAAM,oBAAoB,CAAC,MAAQ,CAAC;QACvC,SAAS;QACT,cAAc;QACd,SAAS;QACT,cAAc,CAAC,UAAY,IAAI;gBAAE;YAAQ;QACzC,YAAY,CAAC;YACT,IAAI;gBAAE;YAAQ;YACd,WAAW;gBACP,IAAI;oBAAE,SAAS;gBAAK;YACxB,GAAG;QACP;QACA,iBAAiB,CAAC;YACd,IAAI;gBAAE;YAAa;YACnB,WAAW;gBACP,IAAI;oBAAE,cAAc;gBAAK;YAC7B,GAAG;QACP;IACJ,CAAC"}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/utils/firebase.jsx"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\"\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_KEY,\r\n  authDomain: \"filmstake-1f257.firebaseapp.com\",\r\n  projectId: \"filmstake-1f257\",\r\n  storageBucket: \"filmstake-1f257.firebasestorage.app\",\r\n  messagingSenderId: \"586049938152\",\r\n  appId: \"1:586049938152:web:c995033e8b01761b971f5d\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst auth = getAuth(app)\r\nconst provider = new GoogleAuthProvider()\r\n\r\nexport { app, auth, provider, signInWithPopup }"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;;;AAEA,MAAM,iBAAiB;IACrB,MAAM;IACN,YAAY;IACZ,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,OAAO;AACT;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;AAC1B,MAAM,OAAO,CAAA,GAAA,0MAAA,CAAA,UAAO,AAAD,EAAE;AACrB,MAAM,WAAW,IAAI,qNAAA,CAAA,qBAAkB"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/store/userSlice.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { signInWithPopup } from \"firebase/auth\";\r\nimport { auth, provider } from \"../utils/firebase\";\r\n\r\n\r\nconst handleError = (error, get) => {\r\n    get().setErrorMessage(error.response ? error.response.data.message : error.message)\r\n    get().setIsloading(false)\r\n}\r\n\r\n\r\nexport const userSlice = (set, get) => ({\r\n    user: null,\r\n    isAuthenticated: false,\r\n\r\n\r\n    //google signin\r\n    googleSignIn: async () => {\r\n        try {\r\n            const result = await signInWithPopup(auth, provider)\r\n            const idToken = await result.user.getIdToken()\r\n\r\n            const { data } = await axios.post(`${process.env.NEXT_PUBLIC_SERVER_URL}/signin`, { idToken }, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                withCredentials: true\r\n            })\r\n\r\n            set({ user: data, isAuthenticated: true })\r\n            get().setMessage(data.message)\r\n            get().setIsloading(false)\r\n\r\n        } catch (error) {\r\n            handleError(error,get)\r\n        }\r\n    }\r\n})"],"names":[],"mappings":";;;AACA;AACA;AADA;AACA;AAFA;;;;AAKA,MAAM,cAAc,CAAC,OAAO;IACxB,MAAM,eAAe,CAAC,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO;IAClF,MAAM,YAAY,CAAC;AACvB;AAGO,MAAM,YAAY,CAAC,KAAK,MAAQ,CAAC;QACpC,MAAM;QACN,iBAAiB;QAGjB,eAAe;QACf,cAAc;YACV,IAAI;gBACA,MAAM,SAAS,MAAM,CAAA,GAAA,kNAAA,CAAA,kBAAe,AAAD,EAAE,yIAAA,CAAA,OAAI,EAAE,yIAAA,CAAA,WAAQ;gBACnD,MAAM,UAAU,MAAM,OAAO,IAAI,CAAC,UAAU;gBAE5C,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,oEAAsC,OAAO,CAAC,EAAE;oBAAE;gBAAQ,GAAG;oBAC3F,SAAS;wBACL,gBAAgB;oBACpB;oBACA,iBAAiB;gBACrB;gBAEA,IAAI;oBAAE,MAAM;oBAAM,iBAAiB;gBAAK;gBACxC,MAAM,UAAU,CAAC,KAAK,OAAO;gBAC7B,MAAM,YAAY,CAAC;YAEvB,EAAE,OAAO,OAAO;gBACZ,YAAY,OAAM;YACtB;QACJ;IACJ,CAAC"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/store/store.js"],"sourcesContent":["import { create } from \"zustand\";\r\nimport { persist } from \"zustand/middleware\"\r\nimport { notificationSlice } from \"./notificationSlice\";\r\nimport { userSlice } from \"./userSlice\";\r\n\r\nconst manageStore = create(\r\n    persist((set, get) => ({\r\n        ...notificationSlice(set),\r\n        ...userSlice(set,get)\r\n    }),\r\n        {\r\n            name: \"app-storage\"\r\n        }\r\n    )\r\n)\r\n\r\nexport default manageStore"],"names":[],"mappings":";;;AAEA;AACA;AAHA;AACA;;;;;AAIA,MAAM,cAAc,CAAA,GAAA,wIAAA,CAAA,SAAM,AAAD,EACrB,CAAA,GAAA,6IAAA,CAAA,UAAO,AAAD,EAAE,CAAC,KAAK,MAAQ,CAAC;QACnB,GAAG,CAAA,GAAA,iIAAA,CAAA,oBAAiB,AAAD,EAAE,IAAI;QACzB,GAAG,CAAA,GAAA,yHAAA,CAAA,YAAS,AAAD,EAAE,KAAI,IAAI;IACzB,CAAC,GACG;IACI,MAAM;AACV;uCAIO"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\n\r\nexport function middleware(request) {\r\n    const token = request.cookies.get('tokenid'); // Get the authentication token from cookies\r\n    const { pathname } = request.nextUrl;\r\n\r\n    // If user is not logged in, redirect to signin/signup if they try to access protected routes\r\n    if (!token && !pathname.startsWith('/signin') && !pathname.startsWith('/signup') && !pathname.startsWith(\"/forgotpassword\")) {\r\n        return NextResponse.redirect(new URL('/signin', request.url));\r\n    }\r\n\r\n    // If user is logged in and tries to access signin/signup, redirect to homepage or another route\r\n    if (token && (pathname.startsWith('/signin') || pathname.startsWith('/signup'))) {\r\n        return NextResponse.redirect(new URL('/', request.url));\r\n    }\r\n\r\n    return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n    matcher: ['/((?!api|_next|static|favicon.ico).*)'],\r\n};\r\n\r\n\r\n\r\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEO,SAAS,WAAW,OAAO;IAC9B,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,YAAY,4CAA4C;IAC1F,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,6FAA6F;IAC7F,IAAI,CAAC,SAAS,CAAC,SAAS,UAAU,CAAC,cAAc,CAAC,SAAS,UAAU,CAAC,cAAc,CAAC,SAAS,UAAU,CAAC,oBAAoB;QACzH,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,WAAW,QAAQ,GAAG;IAC/D;IAEA,gGAAgG;IAChG,IAAI,SAAS,CAAC,SAAS,UAAU,CAAC,cAAc,SAAS,UAAU,CAAC,UAAU,GAAG;QAC7E,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACzD;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC5B;AAEO,MAAM,SAAS;IAClB,SAAS;QAAC;KAAwC;AACtD"}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}